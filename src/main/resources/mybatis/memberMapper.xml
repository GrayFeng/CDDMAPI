<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.cdd.mapi.member.dao.IMemberDao">
    
    	<sql id="memberValues">
    	    id,login_id as loginId,name,password,sex,status,level_id as levelId,score_ceiling as scoreCeiling,
    	    available_score as availableScore,m.create_time as createTime,modify_time as modifyTime,mobile,email,
    	    photo,description,device_flag as deviceFlag,origin,is_admin as isAdmin,sign_time as signTime,city_id as cityId
    	</sql>
    
    	<insert id="addMember" parameterType="Member">
	 		insert into t_member 
	 			(login_id,name,password,sex,status,level_id,score_ceiling,available_score,create_time,modify_time,mobile,email) 
	 		values
	 			(#{loginId},#{name},#{password},1,0,1,0,0,now(),now(),#{mobile},#{email})
		 	<selectKey resultType="int" keyProperty="id" order="AFTER">  
	  			SELECT LAST_INSERT_ID() as id
	  		</selectKey>  
	 	</insert>
	 	
	 	<update id="updateMember" parameterType="Member">
	 		update t_member 
	 		set city_id = #{cityId},sex = #{sex},photo = #{photo},name = #{name},
	 			description = #{description},password = #{password},mobile = #{mobile}
	 		where id = #{id}
	 	</update>
	 	
	 	<select id="getMemberById" resultType="Member" parameterType="Integer">
			select <include refid="memberValues"/> from t_member m where id = #{id} and status = 0
	 	</select>
	 	
    	<select id="getMemberByLoginId" resultType="Member" parameterType="String">
			select <include refid="memberValues"/> from t_member m where login_id = #{loginId} and status = 0
	 	</select>
	 	
    	<select id="getMemberByName" resultType="Member" parameterType="String">
			select <include refid="memberValues"/> from t_member m where name = #{name} and status = 0
	 	</select>
	 	
    	<select id="getMemberStatistics" resultType="Map" parameterType="Integer">
    	    select fansCount,idolCount from
    	    ((select count(fans) as fansCount from t_member_relation where popular_person = #{memberId}) as f
    	    ,(select count(popular_person) as idolCount from t_member_relation where fans = #{memberId}) as i)
    	</select>
	 	
	 	<update id="updateMemberDeviceFlag" parameterType="Member">
	 		update t_member set device_flag = #{deviceFlag} where id = #{id}
	 	</update>
	 	
	 	<update id="signIn" parameterType="Member">
	 		update t_member set sign_time = #{signTime} where id = #{id}
	 	</update>
	 	
	 	<update id="addMemberScore" parameterType="Map">
	 		update t_member set score_ceiling = score_ceiling + #{score},
	 		available_score = available_score + #{score} where id = #{id}
	 	</update>
	 	
	 	<insert id="attention" parameterType="MemberRelation">
	 	    insert into t_member_relation (fans,popular_person,create_time) values(#{fans},#{popular_person},now())
	 	</insert>
	 	
	 	<delete id="unAttention" parameterType="MemberRelation">
	 		delete from t_member_relation where fans = #{fans} and popular_person = #{popular_person}
	 	</delete>
	 	
	 	<select id="getFansCount" resultType="int" parameterType="Integer">
	 	    select count(fans) as fansCount from t_member_relation where popular_person = #{memberId}
	 	</select>
	 	
	 	<select id="getFansList" resultType="Member" parameterType="Map">
	 	    select m.<include refid="memberValues"/> from t_member m left join t_member_relation mr on m.id = mr.fans 
			where m.status = 0 and mr.popular_person = #{memberId} order by mr.create_time desc limit #{startNum},#{size}
	 	</select>
	 	
	 	<select id="getIdolCount" resultType="int" parameterType="Integer">
	 	    select count(popular_person) as idolCount from t_member_relation where fans = #{memberId}
	 	</select>
	 	
	 	<select id="getIdolList" resultType="Member" parameterType="Map">
	 	    select m.<include refid="memberValues"/> from t_member m left join t_member_relation mr on m.id = mr.popular_person 
			where m.status = 0 and mr.fans = #{memberId} order by mr.create_time desc limit #{startNum},#{size}
	 	</select>
	 	
	 	<insert id="sendPrivateMessage" parameterType="PrivateLetter">
	 	    insert into t_privete_letter 
	 	    	(sender,receive_member,message,reply_msg_id,create_time) 
	 	    values
	 	    	(#{from},#{to},#{msg},#{replyId},now())
	 	</insert>
	 	
	 	<select id="getPrivateLetterList" parameterType="PrivateLetterListSearch" resultType="PrivateLetterVO">
	 		select 
	 			pl.id,
	 			pl.sender fromMemberId,
	 			pl.receive_member toMemberId,
	 			pl.message msg,
	 			pl.reply_msg_id replyId,
	 			DATE_FORMAT(pl.create_time,'%Y-%m-%d %T') createTime,
	 			m.name fromMemberName,
	 			m.photo fromMemberPhoto
	 		from 
	 			t_privete_letter pl 
	 		left join
	 			t_member m
	 		on pl.sender = m.id
	 		where 
	 			pl.receive_member = #{memberId}
	 		order by pl.create_time desc
	 		limit #{startNum},#{size}
	 	</select>
	 	
	 	<select id="getPrivateLetterCount" parameterType="int" resultType="int">
	 		select 
	 			count(id)
	 		from 
	 			t_privete_letter pl 
	 		where 
	 			pl.receive_member = #{memberId}
	 	</select>
	 	
</mapper> 
